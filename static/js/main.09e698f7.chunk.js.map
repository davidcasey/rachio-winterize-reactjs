{"version":3,"sources":["services/Rachio.ts","components/InputToken.tsx","components/InputTime.tsx","components/InputCycles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["baseUrl","getPersonEntity","token","a","fetch","method","cache","credentials","headers","Authorization","response","ok","Error","status","json","getDeviceInfo","entityId","InputToken","initialToken","onTokenSuccess","useState","setToken","tokenError","setTokenError","className","htmlFor","href","target","rel","id","type","value","onChange","e","onClick","then","fullName","InputTime","label","initialValue","time","setTime","min","max","parseFloat","InputCycles","cycles","setCycles","App","entity","setEntity","devices","setDevices","duration","setDuration","recovery","setRecovery","info","deviceActiveZones","map","device","name","latitude","longitude","zones","filter","z","enabled","sort","b","zoneNumber","onInputChange","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09e698f7.chunk.js","sourcesContent":["\nconst baseUrl = 'https://api.rach.io/1/public';\n// const getBearerToken = () => '';\n\n/**\n * Retrieve the id for the person entity currently logged in through OAuth.\n * @param token The key to authenticate to the API\n * @returns {Promise<*>} The id of the person entity\n */\nconst getPersonEntity = async (token: string): Promise<any> => {\n  const response = await fetch(`${baseUrl}/person/info`,  {\n    method: 'GET',\n    cache: 'no-cache',\n    credentials: 'include',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  if (!response.ok) {\n    return new Error(`Error getting person entity: ${response.status}`);\n  }\n\n  return response.json();\n};\n\n\n/**\n * Retrieve the information for a person entity\n * @param token The key to authenticate to the API\n * @param entityId The id of the person entity\n * @returns Promise<any>} The person entity information\n */\nconst getDeviceInfo = async (token: string, entityId: string): Promise<any> => {\n  const response = await fetch(`${baseUrl}/person/${entityId}`,  {\n    method: 'GET',\n    cache: 'no-cache',\n    credentials: 'include',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  if (!response.ok) {\n    return new Error(`Error getting device info: ${response.status}`);\n  }\n\n  return await response.json();\n};\n\n/**\n * Stop all watering on device\n * @param token The key to authenticate to the API\n * @param deviceId The device's unique id\n */\nconst deviceStopWater = (token: string, deviceId: string): void => {\n  fetch(`${baseUrl}/device/stop_water`,  {\n    method: 'PUT',\n    mode: 'cors',\n    cache: 'no-cache',\n    credentials: 'include',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n      id: deviceId\n    }),\n  }).catch((error) => {\n    return new Error(`Error stopping watering: ${error}`);\n  });\n};\n\n/**\n * Start a zone\n * @param token The key to authenticate to the API\n * @param zoneId The zone's unique id\n * @param duration Duration in seconds (Range is 0 - 10800 (3 Hours) )\n */\nconst zoneStart = (token: string, zoneId: string, duration: number): void => {\n  fetch(`${baseUrl}/zone/start`,  {\n    method: 'PUT',\n    mode: 'cors',\n    cache: 'no-cache',\n    credentials: 'include',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n      id: zoneId,\n      duration: duration\n    }),\n  }).catch((error) => {\n    return new Error(`Error starting watering: ${error}`);\n  });\n};\n\nexport {\n  getPersonEntity,\n  getDeviceInfo,\n  deviceStopWater,\n  zoneStart\n}","import React, { useState, ChangeEvent } from 'react';\nimport { Entity } from '../models/entity';\n\nimport { getPersonEntity } from '../services/Rachio';\n\nexport type InputTokenProps = {\n  initialToken?: string;\n  onTokenSuccess: (entity: Entity) => void;\n};\n\nexport const InputToken = ({ initialToken, onTokenSuccess }: InputTokenProps) => {\n  const [token, setToken] = useState(initialToken || '');\n  const [tokenError, setTokenError] = useState(false);\n\n  const apiTokenInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setToken(e.target.value);\n  };\n\n  const onSubmitToken = () => {\n    getPersonEntity(token).then(({ id }: any) => {\n      if (id) {\n        setTokenError(false);\n        onTokenSuccess({\n          token,\n          id,\n          fullName: ''\n        });\n        return;\n      }\n      setTokenError(true);\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      <label htmlFor=\"api-token\">\n        API Token <a href=\"https://rachio.readme.io/docs/authentication\" className=\"locate-token\"\n                     target=\"_blank\" rel=\"noreferrer\">Locate your token</a>\n      </label>\n      <input\n        id=\"api-token\"\n        type=\"text\"\n        className={tokenError ? 'invalid' : ''}\n        value={token}\n        onChange={apiTokenInputChange}\n      />\n      <button\n        type=\"button\"\n        id=\"fetch-api\"\n        onClick={onSubmitToken}\n      >\n        Fetch\n      </button>\n      {tokenError &&\n        <p className=\"invalid\">Invalid token</p>\n      }\n      <p className=\"disclaimer\">Your Rachio API token is never stored on our server and only used for the duration of your session.\n        Accessing the site over a public network is not recommended.</p>\n    </div>\n  );\n};\n","import React, { useState, ChangeEvent } from 'react';\n\nexport type InputTimeProps = {\n  id: string;\n  label: string;\n  initialValue?: number;\n  onInputChange: (value: number) => void;\n}\nexport const InputTime = ({ id, label, initialValue }: InputTimeProps) => {\n  const [time, setTime] = useState(initialValue);\n\n  const timeChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setTime(parseFloat(e.target.value));\n  };\n\n  return (\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input\n        id={id}\n        type=\"number\"\n        min=\"1\"\n        max=\"600\"\n        value={time}\n        onChange={timeChange}\n      /> seconds\n    </>\n  );\n};\n","import React, { useState, ChangeEvent } from 'react';\n\nexport type InputCyclesProps = {\n  id: string;\n  label: string;\n  initialValue?: number;\n  onInputChange: (value: number) => void;\n}\nexport const InputCycles = ({ id, label, initialValue }: InputCyclesProps) => {\n  const [cycles, setCycles] = useState(initialValue);\n\n  const cyclesChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setCycles(parseFloat(e.target.value));\n  };\n\n  return (\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input\n        id={id}\n        type=\"number\"\n        min=\"1\"\n        max=\"5\"\n        value={cycles}\n        onChange={cyclesChange}\n      /> cycles\n    </>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Entity } from './models/entity';\nimport { Devices } from './models/devices';\nimport { getDeviceInfo } from './services/Rachio';\n\nimport { InputToken } from './components/InputToken';\nimport { InputTime } from './components/InputTime';\nimport { InputCycles } from './components/InputCycles';\n\nfunction App() {\n  const [entity, setEntity] = useState({});\n  const [devices, setDevices] = useState({});\n  const [duration, setDuration] = useState(10);\n  const [recovery, setRecovery] = useState(10);\n  const [cycles, setCycles] = useState(1);\n\n  const initializeData = (entity: Entity) => {\n    getDeviceInfo(entity.token, entity.id).then((info:any) => {\n      setEntity({\n        ...entity,\n        fullName: info.fullName\n      });\n\n      const deviceActiveZones = info.devices.map((device:any) => {\n        return {\n          name: device.name,\n          id: device.id,\n          latitude: device.latitude,\n          longitude: device.longitude,\n          zones: device.zones.filter((z:any) => z.enabled).sort((a:any, b:any) => a.zoneNumber - b.zoneNumber),\n        };\n      });\n\n      setDevices(deviceActiveZones);\n    });\n  };\n\n  const runWinterize = () => {\n    console.log('ENTITY', entity);\n    console.log('DEVICES', devices);\n  };\n\n  const cancelWinterize = () => {};\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <InputToken\n          initialToken=''\n          onTokenSuccess={initializeData}\n        />\n      </header>\n      <main>\n        <div className=\"row\">\n          <InputTime\n            id=\"time-to-blow\"\n            label=\"Time to blow out each zone\"\n            initialValue={duration}\n            onInputChange={setDuration}\n          />\n        </div>\n\n        <div className=\"row\">\n          <InputTime\n            id=\"time-to-recover\"\n            label=\"Time for air compressor recovery\"\n            initialValue={recovery}\n            onInputChange={setRecovery}\n          />\n        </div>\n\n        <div className=\"row\">\n          <InputCycles\n            id=\"time-to-recover\"\n            label=\"Cycles to run\"\n            initialValue={cycles}\n            onInputChange={setCycles}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          id=\"run-winterize\"\n          onClick={runWinterize}\n        >\n          Winterize\n        </button>\n\n        <button\n          type=\"button\"\n          id=\"cancel-winterize\"\n          onClick={cancelWinterize}\n        >\n          Cancel\n        </button>\n\n        {/*\n        <table>\n          <caption>Irrigation zones</caption>\n          <thead>\n            <tr>\n              <th><input type=\"checkbox\" /></th>\n              <th>Zone</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><input type=\"checkbox\" id=\"\" /></td>\n              <td>Name of zone</td>\n            </tr>\n          </tbody>\n        </table>\n        */}\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/reset.css';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}